#1. load the mono modules with "!mona modules"

#2. choose or instructions from a  module which  meets a specific criteria 
# make sure the module does not have dep or aslr and also choose one that does not
# no memory protections, memory range of the dll does not contain bad characters
# such as null bytes in our case with slmail.

# look through the table for false ASLR and also look through the table
# for the base memory address. **important make sure no bad chars inside the base address
# for our case we do not want any null bytes

#3.  in our case the only module for SLmail without the memory protections is
# SLmfc.dll

#4 we need to find a naturally ocurring jmp esp that occurs inside the module of 
#our choosing and in this case it is SLmfc.dll

#5 identify the addess that the instruction occurs at. 

#6 go to the executables modules list "E" in to bar of immunity. 

#7  locate  SLmfc.dll and double click it. 

#8.  right click on window and click search "jmp esp" or use custom search

#9.  you can also look at the modules list and see that only the text section is actually 
#marked as  executable

#mona can search for any given opcode, the op code of a jmp 
# use metasploit nasm_shell.rb to print out the opcodes

# Jmp esp will normally equal = FFE4

#do a manual search for the opcode FFEF with mona


# I run the following command from the main windows, sometimes I have to close down 
# the main black windows and run the command
#!mona find -s "\xff\xe4" -m slmfc.dll
 
# choose a JMP ESP that dosn't contain any bad characters


# now you will need to write your  JMP esp memory address inot the buffer
# !!! important you will have to write the memory address in little indeina and backwards

# for example  5F4A358F  will be  "\x8f\x35\x4a\x5f"

# you may also set a break point in immunity debugger with that memory address.
# you may have to add it twice due to bugs
#press f2 to place the breakpoint. 

